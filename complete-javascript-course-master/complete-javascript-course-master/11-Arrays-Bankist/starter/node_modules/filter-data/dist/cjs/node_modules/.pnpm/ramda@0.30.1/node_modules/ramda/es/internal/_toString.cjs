'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _includes = require('./_includes.cjs');
var _map = require('./_map.cjs');
var _quote = require('./_quote.cjs');
var _toISOString = require('./_toISOString.cjs');
var keys = require('../keys.cjs');
var reject = require('../reject.cjs');

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _includes.default(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function (obj, keys) {
    return _map.default(function (k) {
      return _quote.default(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };
  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map.default(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + _map.default(recur, x).concat(mapPairs(x, reject.default(function (k) {
        return /^\d+$/.test(k);
      }, keys.default(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote.default(_toISOString.default(x))) + ')';
    case '[object Map]':
      return 'new Map(' + recur(Array.from(x)) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object Set]':
      return 'new Set(' + recur(Array.from(x).sort()) + ')';
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote.default(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, keys.default(x)).join(', ') + '}';
  }
}

exports.default = _toString;
//# sourceMappingURL=_toString.cjs.map
