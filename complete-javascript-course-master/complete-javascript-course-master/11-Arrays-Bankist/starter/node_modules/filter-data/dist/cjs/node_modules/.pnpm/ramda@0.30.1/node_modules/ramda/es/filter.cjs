'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _arrayReduce = require('./internal/_arrayReduce.cjs');
var _curry2 = require('./internal/_curry2.cjs');
var _dispatchable = require('./internal/_dispatchable.cjs');
var _filter = require('./internal/_filter.cjs');
var _isObject = require('./internal/_isObject.cjs');
var _xfilter = require('./internal/_xfilter.cjs');
var keys = require('./keys.cjs');

/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @category Object
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      const isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var filter = /*#__PURE__*/_curry2.default( /*#__PURE__*/_dispatchable.default(['fantasy-land/filter', 'filter'], _xfilter.default, function (pred, filterable) {
  return _isObject.default(filterable) ? _arrayReduce.default(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, keys.default(filterable)) :
  // else
  _filter.default(pred, filterable);
}));
var filter$1 = filter;

exports.default = filter$1;
//# sourceMappingURL=filter.cjs.map
