{"version":3,"file":"liftN.cjs","sources":["../../../../../../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/liftN.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport _arrayReduce from \"./internal/_arrayReduce.js\";\nimport ap from \"./ap.js\";\nimport curryN from \"./curryN.js\";\nimport map from \"./map.js\";\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      const madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function () {\n    return _arrayReduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\nexport default liftN;"],"names":["_curry2","curryN","_arrayReduce","ap","map"],"mappings":";;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAK,gBAAgBA,eAAO,CAAC,SAAS,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE;AAC3D,EAAE,IAAI,MAAM,GAAGC,cAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACjC,EAAE,OAAOA,cAAM,CAAC,KAAK,EAAE,YAAY;AACnC,IAAI,OAAOC,oBAAY,CAACC,UAAE,EAAEC,WAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AACjG,GAAG,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,cAAe,KAAK;;;;","x_google_ignoreList":[0]}