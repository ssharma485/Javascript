'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/.pnpm/@rollup_plugin-typescript@11.1.6_rollup@3.29.4_tslib@2.7.0_typescript@5.5.4/node_modules/tslib/tslib.es6.cjs');
var utils = require('./lib/utils.cjs');
var filtersMap = require('./filters/filtersMap.cjs');
var targetValueNull = require('./prefilters/targetValueNull.cjs');
var curry = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/curry.cjs');
var anyPass = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/anyPass.cjs');
var filter = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/filter.cjs');
var drop = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/drop.cjs');
var take = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/take.cjs');
var transduce = require('./node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/transduce.cjs');

var optionsDefault = {
    caseSensitive: false,
    includeNull: false,
};
function makeSinglePredicator(searchCondition, options, curriedFilter) {
    var partialPredicator = curriedFilter(searchCondition, options.caseSensitive);
    var predicator = targetValueNull.default(options.includeNull, searchCondition, partialPredicator);
    return predicator;
}
/**
 *
 * @param {*array} allData: Array of object
 * @param {*array} searchConditions
 * @param {*object} optionsIn: { caseSensitive: false, includeNull: false, offset: undefined, limit: undefined }
 */
function filterData(allData, searchConditions, optionsIn) {
    if (optionsIn === void 0) { optionsIn = {}; }
    var searchConditionsValNotEmpty = searchConditions.filter(function (_a) {
        var value = _a.value;
        return value !== '' && value != null;
    });
    // return directly when no conditions available
    if (searchConditionsValNotEmpty.length === 0) {
        return tslib_es6.__spreadArray([], allData, true);
    }
    var options = tslib_es6.__assign(tslib_es6.__assign({}, optionsDefault), optionsIn);
    var dataFilters = searchConditionsValNotEmpty.map(function (searchCondition) {
        var key = searchCondition.key, type = searchCondition.type;
        // get partial function
        var curriedFilter = curry.default(filtersMap.default[type]);
        // target key is one
        var predicator;
        if (typeof key === 'string') {
            predicator = makeSinglePredicator(searchCondition, options, curriedFilter);
        }
        else {
            // or search for multiple keys
            predicator = anyPass.default(key.map(function (oneKey) {
                return makeSinglePredicator({
                    key: oneKey,
                    value: searchCondition.value,
                    type: searchCondition.type,
                }, options, curriedFilter);
            }));
        }
        return filter.default(predicator);
    });
    // pagination
    if (options.offset != null && options.limit != null) {
        dataFilters.push(drop.default(options.offset));
        dataFilters.push(take.default(options.limit));
    }
    var filtersTrans = utils.compose.apply(void 0, dataFilters);
    return transduce.default(filtersTrans, utils.listCombiner, [], allData);
}

exports.default = filterData;
//# sourceMappingURL=filterData.cjs.map
