declare enum SearchType {
    EQ = "equal",
    GT = "greater",
    GTE = "greaterorequal",
    LT = "less",
    LTE = "lessorequal",
    LK = "like",
    NE = "notequal",
    NLK = "notlike"
}

interface FilterDataOption {
    caseSensitive?: boolean;
    includeNull?: boolean;
    offset?: number;
    limit?: number;
}
interface SearchConditionMultiple {
    key: string | string[] | string[][];
    value?: string | number | boolean | Date;
    type: SearchType;
}

/**
 *
 * @param {*array} allData: Array of object
 * @param {*array} searchConditions
 * @param {*object} optionsIn: { caseSensitive: false, includeNull: false, offset: undefined, limit: undefined }
 */
declare function filterData<T>(allData: ReadonlyArray<T>, searchConditions: SearchConditionMultiple[], optionsIn?: FilterDataOption): T[];

export { SearchType, filterData };
